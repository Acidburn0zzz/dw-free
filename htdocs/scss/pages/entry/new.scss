@import "foundation/base", "foundation/components/grid", "foundation/components/type";

@media #{$large-up} {
    .entry-full-width {
        .first-column {
            float: left;
            margin-right: $column-gutter / 2;
            width: grid-calc(4, 12);
        }
        .second-column {
            float: left;
            margin-left: 0;
            width: grid-calc(8, 12);
        }

        .second-column > .columns {
            margin-right: -$column-gutter / 2;
        }
    }

    .entry-partial-width {
        .current-entry {
            float: left;
            margin-right: $column-gutter / 2;
            width: grid-calc(8, 12);
        }

        .current-entry > .columns {
            padding-right: 0;
        }

        .row.current-entry:after {
            clear: none;
        }

        .first-column {
            float: left;
            margin-left: $column-gutter / 2;
            width: grid-calc(4, 12);
        }

        .second-column {
            clear: both;
        }
    }
}

.js .js-only.components {
    display: none;
}

// don't let fancy-select-box expand around its contents (causes extra whitespace)
.button-bar .button-group .fancy-select {
    &, & div {
        overflow: visible;
    }

    label {
        @include element-invisible();
    }
}

.current-entry textarea {
    height: auto;
}

.inactive-component {
    display: none;
}

.component {
    padding: 0;
    font-size: .8rem;

    label, input, legend, ul {
        font-size: .8rem;
    }

    h3 {
        font-size: 1rem;
    }

    &.collapse-collapsed {
        h3 {
           margin-bottom: 0;
           @include single-transition(margin-bottom);
        }
    }

    &.collapse-expanded {
        // .last-visible handles the case when we have invisible elements
        // that are only meant to be revealed by js
        .row:last-child .columns >, .last-visible .columns > {
            input, select, button {
                margin-bottom: 0;
            }
        }
    }

    ul {
      list-style-type:none;
      margin: 0;
      padding: 0;
    }

    fieldset fieldset {
        padding: 0;
    }

    // so that when it wraps it still stays beside the radio/checkbox
    // instead of having the entire label go to the next line
    input[type="checkbox"] + label,
    input[type="radio"] + label {
        display: inline;
    }
}

/* Currents */
.moodpreview {
    text-align: center;

    .moodpreview-image {
        height: auto !important; // avoid distortion if we constrained image width
    }
}

/* Access */
.custom-groups ul {
    -moz-column-width: 12em;
    -webkit-column-width: 12em;
    column-width: 12em;
}

/* Icons */

.icons-component {
    .icon {
        text-align: center;
        margin-bottom: $paragraph-margin-bottom;
    }

    .inner button {
        width: 100%;
    }

    .no-icon {
        position: relative;
        width: 100px;
        height: 100px;
        margin: 0 auto;

        a {
            display: block;
            height: 50%;
            position: absolute;
            overflow: auto;
            margin: auto;
            top: 0; left: 0; bottom: 0; right: 0;
        }
    }
}

/* Slug */
.slug-base {
    word-break: break-all;
}

/* Date */

.displaydate-component {
    .picker-output {
        margin-top: -1 * rem-calc(20); // $form-spacing + 2px for borders
    }
}

/* elements in modals */
// remove extra padding here since the modal has its own padding
.reveal-modal fieldset, .reveal-modal fieldset .columns {
    padding: 0;
}

.reveal-modal fieldset {
    border: none;
}

/* TEMPORARY */
.toolbar {
    background-color: gray;
    border: 1px black solid;
    * {
        display: none;
    }
}
.toolbar    { height: 2em;  }

